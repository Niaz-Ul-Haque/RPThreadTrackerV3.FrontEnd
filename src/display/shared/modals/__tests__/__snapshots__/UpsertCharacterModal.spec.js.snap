// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering snapshots should render valid snapshot 1`] = `
<Styled(Modal)
  backdrop={true}
  data-spec="upsert-character-modal"
  isOpen={true}
  toggle={[MockFunction]}
>
  <AvForm
    data-spec="upsert-character-modal-form"
    method="get"
    model={Object {}}
    onInvalidSubmit={[Function]}
    onKeyDown={[Function]}
    onSubmit={[Function]}
    onValidSubmit={[Function]}
    tag={[Function]}
    validationEvent={
      Array [
        "onChange",
        "onInput",
      ]
    }
  >
    <ModalHeader
      charCode={215}
      closeAriaLabel="Close"
      data-spec="upsert-character-modal-header"
      tag="h5"
      toggle={[MockFunction]}
      wrapTag="div"
    >
      Edit Character
    </ModalHeader>
    <ModalBody
      tag="div"
    >
      <TooltipForm
        Renderable={[Function]}
        characterToEdit={
          Object {
            "characterId": 1,
          }
        }
        handleInputChange={[Function]}
      />
    </ModalBody>
    <ModalFooter
      tag="div"
    >
      <Button
        color="primary"
        tag="button"
      >
        Submit Character
      </Button>
       
      <Button
        color="secondary"
        data-spec="upsert-character-modal-close-button"
        onClick={[MockFunction]}
        tag="button"
      >
        Cancel
      </Button>
    </ModalFooter>
  </AvForm>
</Styled(Modal)>
`;

exports[`rendering snapshots should render valid snapshot if character is new 1`] = `
<Styled(Modal)
  backdrop={true}
  data-spec="upsert-character-modal"
  isOpen={true}
  toggle={[MockFunction]}
>
  <AvForm
    data-spec="upsert-character-modal-form"
    method="get"
    model={Object {}}
    onInvalidSubmit={[Function]}
    onKeyDown={[Function]}
    onSubmit={[Function]}
    onValidSubmit={[Function]}
    tag={[Function]}
    validationEvent={
      Array [
        "onChange",
        "onInput",
      ]
    }
  >
    <ModalHeader
      charCode={215}
      closeAriaLabel="Close"
      data-spec="upsert-character-modal-header"
      tag="h5"
      toggle={[MockFunction]}
      wrapTag="div"
    >
      Add Character
    </ModalHeader>
    <ModalBody
      tag="div"
    >
      <TooltipForm
        Renderable={[Function]}
        characterToEdit={Object {}}
        handleInputChange={[Function]}
      />
    </ModalBody>
    <ModalFooter
      tag="div"
    >
      <Button
        color="primary"
        tag="button"
      >
        Submit Character
      </Button>
       
      <Button
        color="secondary"
        data-spec="upsert-character-modal-close-button"
        onClick={[MockFunction]}
        tag="button"
      >
        Cancel
      </Button>
    </ModalFooter>
  </AvForm>
</Styled(Modal)>
`;
